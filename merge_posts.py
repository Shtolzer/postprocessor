import os
import re
import sys
from datetime import datetime

def merge_tcl_files(filenames, output_filename):
    print(f"\nüîß –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ TCL-—Ñ–∞–π–ª–æ–≤ –≤ {output_filename}")
    global_vars = set()
    procedures = {}
    conflicts = {}
    global_code = []
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    
    # –®–∞–≥ 1: –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–æ–≤
    for filename in filenames:
        print(f"  üìÑ –ê–Ω–∞–ª–∏–∑: {os.path.basename(filename)}")
        with open(filename, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –°–±–æ—Ä –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö (–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –º–µ—Ç–æ–¥)
        lines = content.split('\n')
        for line in lines:
            stripped = line.strip()
            if stripped.startswith('global'):
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–µ –∏–º–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
                vars_part = stripped[6:].split('#')[0]  # –£–¥–∞–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
                for var in vars_part.split():
                    if re.match(r'^[a-zA-Z_]\w*$', var):  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ–µ –∏–º—è
                        global_vars.add(var)
        
        # –°–±–æ—Ä –ø—Ä–æ—Ü–µ–¥—É—Ä —Å –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–æ–π —Å–∫–æ–±–æ–∫
        proc_matches = []
        start = 0
        while start < len(content):
            # –ü–æ–∏—Å–∫ –Ω–∞—á–∞–ª–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã
            proc_start = content.find('proc ', start)
            if proc_start == -1:
                break
                
            # –ü–æ–∏—Å–∫ –Ω–∞—á–∞–ª–∞ —Ç–µ–ª–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã
            body_start = content.find('{', proc_start)
            if body_start == -1:
                break
                
            # –ü–æ–∏—Å–∫ –∫–æ–Ω—Ü–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã —Å –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–æ–π —Å–∫–æ–±–æ–∫
            brace_count = 1
            pos = body_start + 1
            while pos < len(content) and brace_count > 0:
                if content[pos] == '{':
                    brace_count += 1
                elif content[pos] == '}':
                    brace_count -= 1
                pos += 1
                
            if brace_count == 0:
                proc_end = pos
                proc_block = content[proc_start:proc_end]
                
                # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã
                name_match = re.search(r'proc\s+(\w+)\s*\{', proc_block)
                if name_match:
                    proc_name = name_match.group(1)
                    if proc_name not in procedures:
                        procedures[proc_name] = {}
                    procedures[proc_name][filename] = proc_block
                
                start = proc_end
            else:
                break
    
    # –®–∞–≥ 2: –í—ã—è–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
    for proc_name, files in procedures.items():
        if len(files) > 1:
            conflict_files = ', '.join([os.path.basename(f) for f in files.keys()])
            print(f"  ‚ö†Ô∏è –ö–æ–Ω—Ñ–ª–∏–∫—Ç –ø—Ä–æ—Ü–µ–¥—É—Ä: {proc_name} –Ω–∞–π–¥–µ–Ω–∞ –≤ {conflict_files}")
            conflicts[proc_name] = files
    
    # –®–∞–≥ 3: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±—ä–µ–¥–∏–Ω—ë–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    output_lines = [
        "# ============================================================================",
        f"# –û–ë–™–ï–î–ò–ù–ï–ù–ù–´–ô –ü–û–°–¢–ü–†–û–¶–ï–°–°–û–† (–ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –°–õ–ò–Ø–ù–ò–ï)",
        f"# –°–æ–∑–¥–∞–Ω–æ: {timestamp}",
        "# ============================================================================",
        ""
    ]
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    if global_vars:
        output_lines.append("# –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ì–õ–û–ë–ê–õ–¨–ù–´–• –ü–ï–†–ï–ú–ï–ù–ù–´–•")
        output_lines.append(f"global {' '.join(sorted(global_vars))}")
        output_lines.append("")
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–∫–æ–Ω—Ñ–ª–∏–∫—Ç–Ω—ã—Ö –ø—Ä–æ—Ü–µ–¥—É—Ä
    output_lines.append(f"# {'=' * 70}")
    output_lines.append("# –ù–ï–ö–û–ù–§–õ–ò–ö–¢–ù–´–ï –ü–†–û–¶–ï–î–£–†–´")
    output_lines.append(f"# {'=' * 70}")
    
    for proc_name, files in procedures.items():
        if proc_name not in conflicts:
            for filename, proc_block in files.items():
                output_lines.append(f"# –ü—Ä–æ—Ü–µ–¥—É—Ä–∞ –∏–∑ {os.path.basename(filename)}")
                output_lines.append(proc_block)
                output_lines.append("")
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–Ω—ã—Ö –ø—Ä–æ—Ü–µ–¥—É—Ä —Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º
    output_lines.append(f"# {'=' * 70}")
    output_lines.append("# –†–ê–ó–†–ï–®–ï–ù–ò–ï –ö–û–ù–§–õ–ò–ö–¢–û–í –ü–†–û–¶–ï–î–£–†")
    output_lines.append(f"# {'=' * 70}")
    
    for proc_name, files in conflicts.items():
        output_lines.append(f"# ‚ö†Ô∏è –ö–û–ù–§–õ–ò–ö–¢ –ü–†–û–¶–ï–î–£–†–´: {proc_name}")
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±—ë—Ä—Ç–∫–∏
        output_lines.append(f"proc {proc_name} {{ args }} {{")
        output_lines.append("  global mom_operation_type")
        output_lines.append("  if {[info exists mom_operation_type]} {")
        output_lines.append('    if {$mom_operation_type == "Turning"} {')
        
        # –ü–æ–∏—Å–∫ —Ç–æ–∫–∞—Ä–Ω–æ–π –≤–µ—Ä—Å–∏–∏
        lathe_file = next((f for f in files if "LATHE" in f.upper()), None)
        if lathe_file:
            output_lines.append(f"      # –¢–æ–∫–∞—Ä–Ω–∞—è –≤–µ—Ä—Å–∏—è –∏–∑ {os.path.basename(lathe_file)}")
            output_lines.append(f"      return [::{proc_name}_turn] $args")
        else:
            output_lines.append("      # –¢–æ–∫–∞—Ä–Ω–∞—è –≤–µ—Ä—Å–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            output_lines.append(f"      return [::{proc_name}_mill] $args")
        
        output_lines.append("    }")
        output_lines.append("  }")
        output_lines.append("  ")
        output_lines.append("  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—Ä–µ–∑–µ—Ä–Ω—É—é –≤–µ—Ä—Å–∏—é")
        
        # –ü–æ–∏—Å–∫ —Ñ—Ä–µ–∑–µ—Ä–Ω–æ–π –≤–µ—Ä—Å–∏–∏
        mill_file = next((f for f in files if "MILL" in f.upper()), None)
        if mill_file:
            output_lines.append(f"  return [::{proc_name}_mill] $args")
        else:
            output_lines.append(f"  return [::{proc_name}_turn] $args")
        
        output_lines.append("}")
        output_lines.append("")
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö –ø—Ä–æ—Ü–µ–¥—É—Ä —Å —Å—É—Ñ—Ñ–∏–∫—Å–∞–º–∏
        for filename, proc_block in files.items():
            suffix = "_turn" if "LATHE" in filename.upper() else "_mill"
            new_proc_name = f"{proc_name}{suffix}"
            
            # –ó–∞–º–µ–Ω–∞ –∏–º–µ–Ω–∏ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –≤ –±–ª–æ–∫–µ
            modified_block = re.sub(
                r'proc\s+' + re.escape(proc_name) + r'\b',
                f'proc {new_proc_name}',
                proc_block
            )
            
            output_lines.append(f"# –û–†–ò–ì–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–¶–ï–î–£–†–ê –ò–ó {os.path.basename(filename)}")
            output_lines.append(modified_block)
            output_lines.append("")
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
    with open(output_filename, 'w', encoding='utf-8') as f:
        f.write('\n'.join(output_lines))
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ —Å–∫–æ–±–æ–∫
    with open(output_filename, 'r', encoding='utf-8') as f:
        content = f.read()
        open_braces = content.count('{')
        close_braces = content.count('}')
        if open_braces != close_braces:
            print(f"  ‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –ù–µ—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∫–æ–±–∫–∏! {{={open_braces} }}={close_braces}")
            print(f"  –†–∞–∑–Ω–∏—Ü–∞: {abs(open_braces - close_braces)} —Å–∫–æ–±–æ–∫")
            
            # –ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            diff = open_braces - close_braces
            if diff > 0:
                content += '\n}' * diff
            else:
                content = '{' * abs(diff) + content
                
            with open(output_filename, 'w', encoding='utf-8') as f_fixed:
                f_fixed.write(content)
            print(f"  ‚úîÔ∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Å–∫–æ–±–∫–∏")
    
    print(f"  ‚úîÔ∏è –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: {output_filename}")
    return True

def merge_def_files(filenames, output_filename):
    print(f"\nüîß –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ DEF-—Ñ–∞–π–ª–æ–≤ –≤ {output_filename}")
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    
    content = []
    for filename in filenames:
        print(f"  üìÑ –û–±—Ä–∞–±–æ—Ç–∫–∞: {os.path.basename(filename)}")
        with open(filename, 'r', encoding='utf-8') as f:
            content.append(f"\n\n{'*' * 60}")
            content.append(f"; –°–û–î–ï–†–ñ–ò–ú–û–ï –ò–ó {os.path.basename(filename)}")
            content.append(f"{'*' * 60}\n")
            content.append(f.read())
    
    with open(output_filename, 'w', encoding='utf-8') as f:
        f.write(f"; ============================================================================\n")
        f.write(f"; –û–ë–™–ï–î–ò–ù–ï–ù–ù–´–ô –ü–û–°–¢–ü–†–û–¶–ï–°–°–û–† (–ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –°–õ–ò–Ø–ù–ò–ï)\n")
        f.write(f"; –°–æ–∑–¥–∞–Ω–æ: {timestamp}\n")
        f.write(f"; ============================================================================\n")
        f.write('\n'.join(content))
    
    print(f"  ‚úîÔ∏è –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: {output_filename}")
    return True

def merge_pui_files(filenames, output_filename):
    print(f"\nüîß –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ PUI-—Ñ–∞–π–ª–æ–≤ –≤ {output_filename}")
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    
    content = []
    for filename in filenames:
        print(f"  üìÑ –û–±—Ä–∞–±–æ—Ç–∫–∞: {os.path.basename(filename)}")
        try:
            with open(filename, 'r', encoding='utf-8') as f:
                content.append(f"\n\n{'#' * 60}")
                content.append(f"# –°–û–î–ï–†–ñ–ò–ú–û–ï –ò–ó {os.path.basename(filename)}")
                content.append(f"{'#' * 60}\n")
                content.append(f.read())
        except Exception as e:
            print(f"  ‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")
            content.append(f"\n\n{'#' * 60}")
            content.append(f"# –û–®–ò–ë–ö–ê –ß–¢–ï–ù–ò–Ø {os.path.basename(filename)}")
            content.append(f"{'#' * 60}")
    
    with open(output_filename, 'w', encoding='utf-8') as f:
        f.write(f"## POSTBUILDER_VERSION=2012.0.1.0\n")
        f.write(f"{'#' * 78}\n")
        f.write(f"#                                                                            #\n")
        f.write(f"#  –û–ë–™–ï–î–ò–ù–ï–ù–ù–´–ô –ü–û–°–¢–ü–†–û–¶–ï–°–°–û–† (–ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –°–õ–ò–Ø–ù–ò–ï)                      #\n")
        f.write(f"#  –°–æ–∑–¥–∞–Ω–æ: {timestamp}                           #\n")
        f.write(f"#                                                                            #\n")
        f.write(f"#  –í–ù–ò–ú–ê–ù–ò–ï: –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —ç—Ç–æ–≥–æ —Ñ–∞–π–ª–∞ –Ω–µ –¥–æ–ª–∂–Ω–æ –∏–∑–º–µ–Ω—è—Ç—å—Å—è –≤—Ä—É—á–Ω—É—é!            #\n")
        f.write(f"#             –í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –≤–Ω–æ—Å–∏—Ç—å—Å—è —á–µ—Ä–µ–∑ TCL/DEF —Ñ–∞–π–ª—ã             #\n")
        f.write(f"#                                                                            #\n")
        f.write(f"{'#' * 78}\n")
        f.write('\n'.join(content))
    
    print(f"  ‚úîÔ∏è –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: {output_filename}")
    return True

def main():
    print("\n" + "=" * 80)
    print("üõ†Ô∏è –ò–ù–¢–ï–õ–õ–ï–ö–¢–£–ê–õ–¨–ù–û–ï –û–ë–™–ï–î–ò–ù–ï–ù–ò–ï –ü–û–°–¢–ü–†–û–¶–ï–°–°–û–†–û–í")
    print("=" * 80)
    
    timestamp = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤
    required_files = [
        'MILL.tcl', 'LATHE.tcl',
        'MILL.def', 'LATHE.def',
        'MILL.pui', 'LATHE.pui'
    ]
    missing = [f for f in required_files if not os.path.exists(f)]
    
    if missing:
        print("\n‚ùå –û–®–ò–ë–ö–ê: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã:")
        for f in missing:
            print(f"  - {f}")
        return
    
    try:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞
        combined_tcl = f"combined_{timestamp}.tcl"
        merge_tcl_files(['MILL.tcl', 'LATHE.tcl'], combined_tcl)
        
        combined_def = f"combined_{timestamp}.def"
        merge_def_files(['MILL.def', 'LATHE.def'], combined_def)
        
        combined_pui = f"combined_{timestamp}.pui"
        merge_pui_files(['MILL.pui', 'LATHE.pui'], combined_pui)
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print("\n‚úÖ –£–°–ü–ï–®–ù–û: –ü–æ—Å—Ç–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä —Å–æ–∑–¥–∞–Ω")
        print(f"  - TCL: {combined_tcl}")
        print(f"  - DEF: {combined_def}")
        print(f"  - PUI: {combined_pui}")
        
        print("\n" + "=" * 80)
        print("üåü –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ:")
        print("1. –î–ª—è —Ç–æ–∫–∞—Ä–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: set mom_operation_type \"Turning\"")
        print("2. –î–ª—è —Ñ—Ä–µ–∑–µ—Ä–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: set mom_operation_type \"Milling\"")
        print("3. –ï—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∏ –≤ NX, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ:")
        print("   - –ë–∞–ª–∞–Ω—Å —Å–∫–æ–±–æ–∫ –≤ TCL-—Ñ–∞–π–ª–µ")
        print("   - –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö")
        print("4. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –Ω–∞ –ø—Ä–æ—Å—Ç—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏—è—Ö –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º")
        print("=" * 80)
        
    except Exception as e:
        print(f"\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {str(e)}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()
